#!/usr/bin/env python
from argparse import ArgumentParser
import os
import time
import sys
import yaml

from tagpack import __version__ as version
from tagpack.cassandra import BATCH_SIZE_LIMIT

CONFIG_FILE = "config.yaml"


def load_config():
    if not os.path.isfile(CONFIG_FILE):
        sys.exit("This program requires a repository config file in {}"
                 .format(os.getcwd()))
    return yaml.safe_load(open(CONFIG_FILE, 'r'))


def show_config(args):
    print(os.path.abspath(CONFIG_FILE))
    if args.verbose:
        print("BaseURI:", CONFIG['baseURI'])
        print("Entity Taxonomy:", CONFIG['taxonomies']['entity'])
        print("Abuse Taxonomy:", CONFIG['taxonomies']['abuse'])


def validate(args):
    print("Called validate with {}".format(args.folders))


def ingest(args):
    print("Called ingest with {}".format(args.folders))


def main():
    parser = ArgumentParser(
        description='TagPack validation and ingest tool',
        epilog='GraphSense TagPack Tool v{}- https://graphsense.info'
        .format(version))
    parser.add_argument('-v', '--version', action='version', version=version)

    subparsers = parser.add_subparsers(title='Commands')

    # parser for config command
    parser_c = subparsers.add_parser("config",
                                     help="get TagPack Repository options")
    parser_c.add_argument('-v', '--verbose', action='store_true',
                          help='show tagpack repository configuration')
    parser_c.set_defaults(func=show_config)

    # parser for ingest command
    parser_i = subparsers.add_parser("ingest",
                                     help="ingest TagPacks into GraphSense")
    parser_i.add_argument('-f', '--folders', nargs='+', metavar='FOLDER',
                          default=[os.getcwd()],
                          help='TagPacks root folder; default "./"')
    parser_i.add_argument('-d', '--db_nodes', nargs='+', default='127.0.0.1',
                          metavar='DB_NODE',
                          help='list of Cassandra nodes; default "localhost")')
    parser_i.add_argument('-b', '--batch_size', nargs='?',
                          default=BATCH_SIZE_LIMIT,
                          help='batch size for inserting tags into Cassandra)')
    parser_i.set_defaults(func=ingest)

    # parser for validate command
    parser_v = subparsers.add_parser("validate", help="validate TagPacks")
    parser_v.add_argument('-f', '--folders', nargs='+', metavar='FOLDER',
                          default=[os.getcwd()],
                          help='TagPacks root folder; default "./"')
    parser_v.set_defaults(func=validate)

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    if (sys.version_info < (3, 6)):
        sys.exit("This program requires python version 3.6 or later")

    global CONFIG
    CONFIG = load_config()

    t0 = time.time()
    main()
    print('Total time:', time.time() - t0)
